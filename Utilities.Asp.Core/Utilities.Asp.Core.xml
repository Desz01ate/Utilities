<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities.Asp.Core</name>
    </assembly>
    <members>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.RefreshToken(Utilities.Asp.Core.Models.JwtTokenEntity)">
            <summary>
            Post method for request new JWT with expired access token and refresh token.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.Authenticate(System.String,System.String)">
            <summary>
            Get method for request JWT with given user id.
            </summary>
            <param name="id">User ID</param>
            <returns>Response of request in form of { success, message , data }</returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.Revoke(System.String)">
            <summary>
            Delete method for revoke access token.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.GenerateRefreshToken">
            <summary>
            Generate pseudo-random refresh token to use alongside access token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.GetPrincipalFromExpiredToken(System.String,Microsoft.IdentityModel.Tokens.TokenValidationParameters)">
            <summary>
            Retrieve jwt principal from expired token, useful for re-generate new token.
            </summary>
            <param name="token"></param>
            <param name="tokenValidationParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.VerifyAuthentication(System.String,System.String)">
            <summary>
            Verify any request for JWT from Authenticate method by given id and return if the user is valid or not
            </summary>
            <param name="id">User ID</param>
            <returns>boolean which indicate whether the user is allow to get the JWT or not</returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.RetrieveRefreshTokenFromPreferredDataSource(System.String)">
            <summary>
            Retrieve refresh token correspond to username from preferred datasource.
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Based.JwtAuthorizationBasedController.SaveRefreshTokenToPreferredDataSource(System.String,System.String)">
            <summary>
            Save refresh token alongside username to any preferred datasource.
            </summary>
            <param name="username"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="T:Utilities.Asp.Core.Based.SignalrController`1">
            <summary>
            A controller with SignalR context integrated.
            </summary>
            <typeparam name="THub"></typeparam>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`1.Hub">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="T:Utilities.Asp.Core.Based.SignalrController`2">
            <summary>
            A controller with SignalR context integrated.
            </summary>
            <typeparam name="THub1"></typeparam>
            <typeparam name="THub2"></typeparam>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`2.Hub1">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`2.Hub2">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="T:Utilities.Asp.Core.Based.SignalrController`3">
            <summary>
            A controller with SignalR context integrated.
            </summary>
            <typeparam name="THub1"></typeparam>
            <typeparam name="THub2"></typeparam>
            <typeparam name="THub3"></typeparam>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`3.Hub1">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`3.Hub2">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="F:Utilities.Asp.Core.Based.SignalrController`3.Hub3">
            <summary>
            SignalR hub context.
            </summary>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.JwtAuthorizationConfiguration.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Set required authentication and bearer for JWT, this method need to be call on ConfigureServices on Startup.cs
            </summary>
            <param name="services">instance of IServiceCollection</param>
            <param name="configuration">configuration read from appsettings.json with 'JwtIssuer','JwtAudience' and 'JwtKey' properties.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.JwtAuthorizationConfiguration.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.String,System.String)">
            <summary>
            Set required authentication and bearer for JWT, this method need to be call on ConfigureServices on Startup.cs
            </summary>
            <param name="services">instance of IServiceCollection</param>
            <param name="validIssuer">issuer of JWT</param>
            <param name="validAudience">audience of JWT</param>
            <param name="jwtKey">key of JWT</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.JwtAuthorizationConfiguration.UseJwtAuthentication(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            (optional) You can use app.UserAuthentication(); in Startup.Configure.
            </summary>
            <param name="application"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.SwaggerConfiguration.AddSwaggerServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IDictionary{System.String,Swashbuckle.AspNetCore.Swagger.Info})">
            <summary>
            Add Swagger generate options to IServiceCollection, this method must be called on ConfigureServices method in order to take effects.
            </summary>
            <param name="services"></param>
            <param name="configs"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.SwaggerConfiguration.UseSwaggerRequest(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String,System.String,System.String)">
            <summary>
            Add Swagger services to HTTP request pipeline, this method must be called on Configure method in order to take effects.
            </summary>
            <param name="application"></param>
            <param name="name"></param>
            <param name="url"></param>
            <param name="routePrefix"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Configurations.SwaggerConfiguration.UseSwaggerRequest(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIOptions})">
            <summary>
            Add Swagger services to HTTP request pipeline, this method must be called on Configure method in order to take effects.
            </summary>
            <param name="application"></param>
            <param name="action"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Extensions.FilterContextExtension.GetRequestHeader(Microsoft.AspNetCore.Mvc.Filters.FilterContext,System.String)">
            <summary>
            Get request header using key.
            </summary>
            <param name="context"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Extensions.FilterContextExtension.GetRequestController(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            Get request controller.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Extensions.FilterContextExtension.GetRequestAction(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            Get request action.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Extensions.FilterContextExtension.GetDependencyInjectionInstance``1(Microsoft.AspNetCore.Mvc.Filters.FilterContext)">
            <summary>
            Get dependency injection object which is injected from startup as a generic object"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Asp.Core.Extensions.FilterContextExtension.GetDependencyInjectionInstance(Microsoft.AspNetCore.Mvc.Filters.FilterContext,System.Type)">
            <summary>
            Get dependency injection object which is injected from startup.
            </summary>
            <param name="context"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Asp.Core.Models.Response">
            <summary>
            Defined set of basic properties required for most HTTP response.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response.Success">
            <summary>
            Indicated that the request has been successfully processed.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response.Message">
            <summary>
            Optional message.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response.Data">
            <summary>
            Optional data.
            </summary>
        </member>
        <member name="M:Utilities.Asp.Core.Models.Response.#ctor(System.Boolean,System.String,System.Object)">
            <summary>
            Ctor
            </summary>
            <param name="success"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Models.Response.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:Utilities.Asp.Core.Models.Response`1">
            <summary>
            Defined set of basic properties required for most HTTP response with generic data-object constraint.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response`1.Success">
            <summary>
            Indicated that the request has been successfully processed.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response`1.Message">
            <summary>
            Optional message.
            </summary>
        </member>
        <member name="P:Utilities.Asp.Core.Models.Response`1.Data">
            <summary>
            Optional data.
            </summary>
        </member>
        <member name="M:Utilities.Asp.Core.Models.Response`1.#ctor(System.Boolean,System.String,`0)">
            <summary>
            Ctor
            </summary>
            <param name="success"></param>
            <param name="message"></param>
            <param name="data"></param>
        </member>
        <member name="M:Utilities.Asp.Core.Models.Response`1.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
    </members>
</doc>
