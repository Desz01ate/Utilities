<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities</name>
    </assembly>
    <members>
        <member name="T:Utilities.Cryptography">
            <summary>
            Simple wrapper for cryptography methods
            </summary>
        </member>
        <member name="M:Utilities.Cryptography.Encrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Encrypt given plain text into hash string with specific salt
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.Decrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Decrypt given hash string into plain text with specific salt
            </summary>
            <param name="hash">Hash string to decrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Decryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text and salt byte array
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text and salt base64 string
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Base64 string using to calculate the hash</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.Verify(System.String,System.String,System.String,System.Int32)">
            <summary>
            Compare the plain text with given hash and salt
            </summary>
            <param name="plainText">Plain text to compare</param>
            <param name="hash">Hash string to compare</param>
            <param name="salt">Salt to compute while comparing</param>
            <param name="iterations">Iterations to compute while comparing</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateSalt">
            <summary>
            Randomly generate salt byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Diagnostics.RuntimeEstimation(System.Action)">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="M:Utilities.Diagnostics.RuntimeEstimationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="M:Utilities.HttpRequest.Get(System.String)">
            <summary>
            Send a GET request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.GetAsync(System.String)">
            <summary>
            Send a GET request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">Target endpoint</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Post(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a POST request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostAsync(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a POST request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Put(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a PUT request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutAsync(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a PUT request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Delete(System.String)">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync(System.String)">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Delete(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync(System.String,System.Object,System.Text.Encoding,System.String)">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="mediatype">The body media type.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsPhoneNumber(System.String,System.String)">
            <summary>
            Check if the given input is matching the phone number (Thailand phone number is default)
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsEmail(System.String,System.String)">
            <summary>
            Check if the given input is matching the email
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String)">
            <summary>
            Check if the given input is matching the number-only
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyText(System.String)">
            <summary>
            Check if the given input is matching the string-only (English and Thai alphabetics only)
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder``1(System.Data.Common.DbDataReader)">
            <summary>
            Convert DbDataReader into POCO object using reflecting
            </summary>
            <typeparam name="T">typeof specific PO</typeparam>
            <param name="row">data reader to convert to POCO object</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert DbDataReader into dynamic object with specified column name
            </summary>
            <param name="row">data reader to convert to dynamic object</param>
            <param name="columns">column name container</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL">
            <summary>
            Collections of SQL Connection for SQL Server and Oracle Database
            </summary>
        </member>
        <member name="T:Utilities.SQL.SQLServer">
            <summary>
            Provide wrapper access to SQL Server with basic operation like ExecuteReader,ExecuteNonQuery and ExecuteScalar
            </summary>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteScalar``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteNonQuery(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteScalarAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteNonQueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:Utilities.SQL.Oracle">
            <summary>
            Provide wrapper access to Oracle Database with basic operation like ExecuteReader,ExecuteNonQuery and ExecuteScalar
            </summary>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteScalar``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteNonQuery(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteScalarAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteNonQueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="T:Utilities.String">
            <summary>
            Collection of extension method for string datatype
            </summary>
        </member>
        <member name="M:Utilities.String.ToLeadingUpper(System.String,System.Boolean,System.Char)">
            <summary>
            Convert input string to upper case just first character (for the whole input or for each word)
            </summary>
            <param name="input"></param>
            <param name="upperAllWords"></param>
            <param name="splitter"></param>
            <returns></returns>
        </member>
    </members>
</doc>
