<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities</name>
    </assembly>
    <members>
        <member name="M:Utilities.Diagnostics.RuntimeEstimation(System.Action)">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="M:Utilities.Diagnostics.RuntimeEstimationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="T:Utilities.ImageProcessing">
            <summary>
            Collection of image processing methods
            </summary>
        </member>
        <member name="T:Utilities.ImageProcessing.GaussianBlur">
            <summary>
            Class that contain definition for image blurry using gaussian algorithm
            </summary>
        </member>
        <member name="M:Utilities.ImageProcessing.GaussianBlur.Dispose">
            <summary>
            Dispose object
            </summary>
        </member>
        <member name="M:Utilities.ImageProcessing.GaussianBlur.#ctor(System.Drawing.Bitmap)">
            <summary>
            Instantiate object with pre-configuration parameters.
            </summary>
            <param name="image">Base image</param>
        </member>
        <member name="M:Utilities.ImageProcessing.GaussianBlur.Process(System.Int32)">
            <summary>
            Begin the blur process
            </summary>
            <param name="radial">Blur radial</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsPhoneNumber(System.String,System.String)">
            <summary>
            Check if the given input is matching the phone number (Thailand phone number is default)
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsEmail(System.String,System.String)">
            <summary>
            Check if the given input is matching the email
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String)">
            <summary>
            Check if the given input is matching the number-only
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyText(System.String)">
            <summary>
            Check if the given input is matching the string-only (English and Thai alphabetics only)
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder``1(System.Data.Common.DbDataReader)">
            <summary>
            Convert DbDataReader into POCO object using reflecting
            </summary>
            <typeparam name="T">typeof specific PO</typeparam>
            <param name="row">data reader to convert to POCO object</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert DbDataReader into dynamic object with specified column name
            </summary>
            <param name="row">data reader to convert to dynamic object</param>
            <param name="columns">column name container</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL">
            <summary>
            Collections of 
            </summary>
        </member>
        <member name="T:Utilities.SQL.SQLServer">
            <summary>
            Provide wrapper access to SQL Server with basic operation like ExecuteReader,ExecuteNonQuery and ExecuteScalar
            </summary>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReader(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteScalar``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteNonQuery(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteReaderAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteScalarAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.SQLServer.ExecuteNonQueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.Oracle">
            <summary>
            Provide wrapper access to Oracle Database with basic operation like ExecuteReader,ExecuteNonQuery and ExecuteScalar
            </summary>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReader(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteScalar``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteNonQuery(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteReaderAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteScalarAsync``1(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Oracle.ExecuteNonQueryAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.Data.SqlClient.SqlParameter},System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="connectionString">Connection string to database</param>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter)</param>
            <param name="parameters">SQL parameters according to the sql parameter</param>
            <param name="commandType">Type of SQL Command</param>
            <returns></returns>
        </member>
    </members>
</doc>
