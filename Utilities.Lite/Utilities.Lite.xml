<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities.Lite</name>
    </assembly>
    <members>
        <member name="T:Utilities.Attributes.SQL.BindingFlagsAttribute">
            <summary>
            Attribute for specific how reflection should perform on usage class
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.FieldAttribute">
            <summary>
            Attribute for field name customization
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.IgnoreFieldAttribute">
            <summary>
            Attribute for ignorance on insert or update statement
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.PrimaryKeyAttribute">
            <summary>
            Attribute which specified which property is a primary key
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.TableAttribute">
            <summary>
            Attribute for table name customization
            </summary>
        </member>
        <member name="T:Utilities.Classes.InternalPropertyInfo">
            <summary>
            Proxy for PropertyInfo for customizable property for internal use.
            </summary>
        </member>
        <member name="T:Utilities.Interfaces.IGenericRepository`1">
            <summary>
            Contains required implementation on Repository template
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Utilities.Interfaces.ICSVReader">
            <summary>
            Interface required for CSV Reader.
            </summary>
        </member>
        <member name="M:Utilities.Interfaces.ICSVReader.ReadFromCSV(System.String)">
            <summary>
            Content of csv data line in form of string. 
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Utilities.Interfaces.IExcelReader">
            <summary>
            Interface required for Excel Data Reader.
            </summary>
        </member>
        <member name="M:Utilities.Interfaces.IExcelReader.GetExternalColumnIndex(System.String)">
            <summary>
            Map object property name to its index inside excel file.
            </summary>
            <param name="property">Property name per implemented class</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Interfaces.IDatabaseConnector`2">
            <summary>
            Provide methods for wrapper operation on DbConnection class
            </summary>
            <typeparam name="TDatabaseType">DbConnection type</typeparam>
            <typeparam name="TParameter">DbParameter type</typeparam>
        </member>
        <member name="T:Utilities.Interfaces.IDatabaseConnectorExtension`2">
            <summary>
            Provide extension set of operations on top of IDatabaseConnector
            </summary>
            <typeparam name="TDatabaseType">DbConnection type</typeparam>
            <typeparam name="TParameter">DbParameter type</typeparam>
        </member>
        <member name="T:Utilities.Interfaces.IDatabaseConnectorProperty">
            <summary>
            Provide an essential properties to database connector interface
            </summary>
        </member>
        <member name="T:Utilities.DesignPattern.UnitOfWork.Components.Repository`3">
            <summary>
            Example implementation of IGenericRepository with dependency injection of DAL
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TDatabase"></typeparam>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="F:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.DatabaseConnector">
            <summary>
            Instance of database connector.
            </summary>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.#ctor(Utilities.Interfaces.IDatabaseConnectorExtension{`1,`2})">
            <summary>
            Constructor.
            </summary>
            <param name="databaseConnector">Instance of DatabaseConnector.</param>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Delete(`0)">
            <summary>
            Delete data from repository.
            </summary>
            <param name="obj">Generic object.</param>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Delete(System.Object)">
            <summary>
            Delete data from repository.
            </summary>
            <param name="key">Primary key of target object.</param>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Insert(`0)">
            <summary>
            Insert data into repository.
            </summary>
            <param name="obj">Generic object.</param>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Select">
            <summary>
            Get all data from repository.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Select(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get data by specific condition from repository.
            </summary>
            <param name="predicate">Predicate condition.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Select(System.Object)">
            <summary>
            Get data from repository.
            </summary>
            <param name="key">Primary key of target object.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.DesignPattern.UnitOfWork.Components.Repository`3.Update(`0)">
            <summary>
            Update data in repository.
            </summary>
            <param name="obj">Generic object.</param>
        </member>
        <member name="T:Utilities.Diagnostics">
            <summary>
            Simple diagnostic methods
            </summary>
        </member>
        <member name="M:Utilities.Diagnostics.RuntimeEstimation(System.Action)">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="M:Utilities.Diagnostics.MemeryEstimation(System.Action)">
            <summary>
            Execute given function and return total memory usage during an execution
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>Total memory usage</returns>
        </member>
        <member name="M:Utilities.Diagnostics.MemeryEstimationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute given function and return total memory usage during an execution
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>Total memory usage</returns>
        </member>
        <member name="M:Utilities.Diagnostics.RuntimeEstimationAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Execute given function and return an execution time in milliseconds
            </summary>
            <param name="action">Any given function to execute</param>
            <returns>An execution time in milliseconds</returns>
        </member>
        <member name="T:Utilities.Exceptions.AttributeException">
            <summary>
            Express attribute exception throw for internal details.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.AttributeException.CausedByAttribute">
            <summary>
            Type that cause the exception.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.AttributeException.CallerClass">
            <summary>
            Occured on caller class.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.AttributeException.InnerException">
            <summary>
            Inner exception details.
            </summary>
        </member>
        <member name="T:Utilities.Exceptions.InvalidMultipleAttributesException">
            <summary>
            Express non-multiple attribute exception throw for internal details.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.InvalidMultipleAttributesException.CausedByAttribute">
            <summary>
            Type that cause the exception.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.InvalidMultipleAttributesException.CallerClass">
            <summary>
            Occured on caller class.
            </summary>
        </member>
        <member name="P:Utilities.Exceptions.InvalidMultipleAttributesException.InnerException">
            <summary>
            Inner exception details.
            </summary>
        </member>
        <member name="M:Utilities.File.ReadJsonAs``1(System.String,System.IO.FileMode)">
            <summary>
            Read json file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target json file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadXmlAs``1(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
            Read xml file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target xml file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadJsonAsAsync``1(System.String,System.IO.FileMode)">
            <summary>
            Read json file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target json file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadXmlAsAsync``1(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
            Read xml file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target xml file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadCsvAs``1(System.String,System.Boolean)">
            <summary>
            Read csv file and transform input into given CSV (you still need to manually give custom implement via ICSVReader)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsJson(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Text.Encoding)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsJson(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsCsv(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            Serialize given object and write to csv file.
            </summary>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.WriteAsCsv(System.Object,System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            Serialize given object and write to csv file.
            </summary>
            <param name="data">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.ReadExcelAs``1(System.String,System.Boolean,System.String)">
            <summary>
            Read excel file and convert to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="hasHeader"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsJsonAsync(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.WriteAsJsonAsync(System.Object,System.String,System.Text.Encoding,System.IO.FileMode)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="T:Utilities.HttpRequest">
            <summary>
            Wrapper for standard Microsoft HttpClient request for GET,POST,PUT and DELETE
            </summary>
            <summary>
            Wrapper for standard Microsoft HttpClient request for GET,POST,PUT and DELETE
            </summary>
        </member>
        <member name="M:Utilities.HttpRequest.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a GET request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.GetFor``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a GET request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a GET request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">Target endpoint</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.GetAsyncFor``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a GET request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Delete(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteFor``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsyncFor``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Post(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a POST request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a POST request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostAsync(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a POST request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostAsyncFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a POST request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="encoding">The body content type.</param>
            <param name="contentType">The body media type.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Put(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a PUT request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a PUT request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutAsync(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a PUT request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutAsyncFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a PUT request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.Delete(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsyncFor``1(System.String,System.Net.Http.HttpContent,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
            <param name="url">The Uri the request is sent to.</param>
            <param name="body">The body content the request is sent to.</param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Metadata">
            <summary>
            Contains information of Utilities library versioning.
            </summary>
        </member>
        <member name="P:Utilities.Metadata.Version">
            <summary>
            Library version.
            </summary>
        </member>
        <member name="P:Utilities.Metadata.TargetFramework">
            <summary>
            Build target framework version.
            </summary>
        </member>
        <member name="T:Utilities.RegularExpression">
            <summary>
            Basic regular expression wrapper
            </summary>
        </member>
        <member name="M:Utilities.RegularExpression.IsPhoneNumber(System.String,System.String)">
            <summary>
            Check if the given input is matching the phone number (Thailand phone number is default)
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsEmail(System.String,System.String)">
            <summary>
            Check if the given input is matching the email
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String)">
            <summary>
            Check if the given input is matching the number-only
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyText(System.String)">
            <summary>
            Check if the given input is matching the string-only (English and Thai alphabetics only)
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Cryptography">
            <summary>
            Simple wrapper for cryptography methods
            </summary>
        </member>
        <member name="M:Utilities.Cryptography.Encrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Encrypt given plain text into hash string with specific salt
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.Decrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Decrypt given hash string into plain text with specific salt
            </summary>
            <param name="hash">Hash string to decrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Decryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text and salt byte array
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateHash(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Generate combination of hash string and salt string from given plain text and salt base64 string
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Base64 string using to calculate the hash</param>
            <param name="byteSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.Verify(System.String,System.String,System.String,System.Int32)">
            <summary>
            Compare the plain text with given hash and salt
            </summary>
            <param name="plainText">Plain text to compare</param>
            <param name="hash">Hash string to compare</param>
            <param name="salt">Salt to compute while comparing</param>
            <param name="iterations">Iterations to compute while comparing</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.GenerateSalt">
            <summary>
            Randomly generate salt byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Cryptography.SecureRandomString(System.Int32,System.String)">
            <summary>
            Provide statistically random string generate with customizable length and combination.
            </summary>
            <param name="length">Length of string.</param>
            <param name="combination">Combination of string.</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.Cryptography.AES">
            <summary>
            Simple wrapper for Advance Encryption Standard.
            </summary>
        </member>
        <member name="M:Utilities.Security.Cryptography.AES.Encrypt(System.String,System.String)">
            <summary>
            Encrypt data by given key using Advance Encryption Standard.
            </summary>
            <param name="key">key to encrypt the data</param>
            <param name="data">raw data to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.AES.Decrypt(System.String,System.String)">
            <summary>
            Decrypt data by given key using Advance Encryption Standard.
            </summary>
            <param name="key">key to decrypt the data</param>
            <param name="data">encrypted data to decrypt</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.Cryptography.RSA">
            <summary>
            Simple wrapper for Rivest–Shamir–Adleman method
            </summary>
        </member>
        <member name="M:Utilities.Security.Cryptography.RSA.KeyGenerator">
            <summary>
            Generate private key and public key as a pair.
            </summary>
            <returns>Tuple of private and public key</returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.RSA.CreatePrivateKey">
            <summary>
            Generate private key.
            </summary>
            <returns>private key as string</returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.RSA.CreatePublicKey(System.String)">
            <summary>
            Generate public key using private key.
            </summary>
            <param name="privateKey">Private key as string</param>
            <returns>public key as string</returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.RSA.Encrypt(System.String,System.String)">
            <summary>
            Encrypt raw data using public key
            </summary>
            <param name="publicKey">Public key as string</param>
            <param name="data">Raw data to encrypt</param>
            <returns>Encrypted data as byte array</returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.RSA.Decrypt(System.String,System.Byte[])">
            <summary>
            Decrypt encrypted byte array using private key
            </summary>
            <param name="privateKey">Private key as string</param>
            <param name="encryptedBytes">Encrypted byte array</param>
            <returns>Raw data of encrypted byte array</returns>
        </member>
        <member name="T:Utilities.Shared.Data">
            <summary>
            This class contains a generic way to build data from specific source such as DbDataReader or from object itself
            </summary>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder``1(System.Data.Common.DbDataReader)">
            <summary>
            Convert DbDataReader into POCO object using reflection with unsafe operation (superior in speed but had no consistency guaruntee)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilderStrict``1(System.Data.Common.DbDataReader)">
            <summary>
            Convert DbDataReader into POCO object using reflection using implicit inference (torelance for mismatch data type but slower down the building process)
            </summary>
            <typeparam name="T">typeof specific PO</typeparam>
            <param name="row">data reader to convert to POCO object</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.RowBuilder(System.Data.Common.DbDataReader,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convert DbDataReader into dynamic object with specified column name
            </summary>
            <param name="row">data reader to convert to dynamic object</param>
            <param name="columns">column name container</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Data.ConvertDataRowTo``1(System.Data.DataRow)">
            <summary>
            Convert data row into POCO.
            </summary>
            <typeparam name="T">Class that implement IExcelReader</typeparam>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataReaderExtension.GetColumns(System.Data.Common.DbDataReader)">
            <summary>
            Get underlying column name of the DbDataReader.
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataTableExtension.ToList``1(System.Data.DataTable)">
            <summary>
            Convert DataTable into IEnumerable of specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataTableExtension.ToList(System.Data.DataTable)">
            <summary>
            Convert DataTable into IEnumerable of dynamic.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Shared.Enumerable">
            <summary>
            Collection of Emnumerable extension methods
            </summary>
        </member>
        <member name="M:Utilities.Shared.Enumerable.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combine 2 or more enumerable of the same type into new enumerable
            </summary>
            <typeparam name="T">type of enumerable</typeparam>
            <param name="enumerables">enumerables to combine</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.SubEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Create new enumerable from given enumerable, start index and count
            </summary>
            <typeparam name="T">type of enumerable</typeparam>
            <param name="baseEnumerable">base enumerable</param>
            <param name="startIndex">starting index</param>
            <param name="count">count of elements</param>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.Exception"/>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Take last element out of given enumerable
            </summary>
            <typeparam name="T">type of enumerable</typeparam>
            <param name="baseEnumerable">base enumerable</param>
            <param name="count">count of elements</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert given collection to list **only if** enumerable is currently not a list, otherwise return data without mutable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits the collection into two collections, which is paired as Match and Unmatch.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataset">A base dataset.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnuemrable into Stack.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataset"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.Enumerable.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnumerable into Queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataset"></param>
            <exception cref="T:System.ArgumentNullException"/>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.DatabaseConnector`2">
            <summary>
            Abstract class that is contains the implementation of the generic database connector.
            </summary>
            <typeparam name="TDatabaseConnection">Type of DbConnection</typeparam>
            <typeparam name="TParameterType">Type of DbParameter</typeparam>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector`2.Connection">
            <summary>
            Instance of object that hold information of the connection.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector`2.SQLFunctionConfiguration">
            <summary>
            SQL-function configuration for LINQ usage.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector`2.ConnectionString">
            <summary>
            Connection string of this object.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector`2.IsOpen">
            <summary>
            Determine wheter the connection is open or not.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectionString">Connection string for database.</param>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Dispose(System.Boolean)">
            <summary>
            Protected implementation of dispose pattern
            </summary>
            <param name="disposing">.</param>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Dispose">
            <summary>
            Object disposer which close the connection related to this object.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.BeginTransaction">
            <summary>
            Shortcut for this.Connection.BeginTransaction()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Shortcut for this.Connection.BeginTransaction(isolationLevel)
            </summary>
            <param name="isolationLevel">Specified isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReader``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReader``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReader(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteScalar``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteNonQuery(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReaderAsync``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Func{System.Data.Common.DbDataReader,``0},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="objectBuilder">How the POCO should build with each giving row of SqlDataReader.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReaderAsync``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReaderAsync(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <returns>IEnumerable of dynamic object</returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteScalarAsync``1(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteNonQueryAsync(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteScalar(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return a string
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteScalarAsync(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return a string in asynchronous manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
            <exception cref="T:System.Exception"/>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReaderAsDataTable(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return DataTable
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.ExecuteReaderAsDataTableAsync(System.String,System.Collections.Generic.IEnumerable{`1},System.Data.CommandType,System.Data.Common.DbTransaction)">
            <summary>
            Execute SELECT SQL query and return DataTable in an asynchronus manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Select``1(System.Nullable{System.Int32},System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select all rows from table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Select``1(System.Object,System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select one row from table from given primary key (primary key can be set by [PrimaryKey] attribute, table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey">Primary key of specific row</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Insert``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Insert row into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Object to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Update``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Update specific object into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Object to update.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an update.</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Delete``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Delete given object from table by inference of [PrimaryKey] attribute. (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectAsync``1(System.Nullable{System.Int32},System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select all rows from table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of object</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectAsync``1(System.Object,System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select one row from table from given primary key (primary key can be set by [PrimaryKey] attribute, table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey">Primary key of specific row</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.InsertAsync``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Insert row into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Object to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.UpdateAsync``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Update specific object into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Object to update.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an update.</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteAsync``1(``0,System.Data.Common.DbTransaction)">
            <summary>
            Delete given object from table by inference of [PrimaryKey] attribute. (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Select``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Delete``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction)">
            <summary>
            Delete data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Func{System.Data.Common.DbDataReader,``0},System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="dataBuilder">Row builder template.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.Delete``1(System.Object,System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using primary key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey">Specified primary key.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteAsync``1(System.Object,System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using primary key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey">Specified primary key.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.CreateTable``1">
            <summary>
            Create table from given model
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DROP_TABLE_USE_WITH_CAUTION``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectQueryGenerate``1(System.Nullable{System.Int32})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectQueryGenerate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.SelectQueryGenerate``1(System.Object)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.InsertQueryGenerate``1(``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.UpdateQueryGenerate``1(``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteQueryGenerate``1(``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteQueryGenerate``1(System.Object)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector`2.DeleteQueryGenerate``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Translator.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Utilities.SQL.Translator.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:Utilities.SQL.Translator.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:Utilities.SQL.Translator.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="M:Utilities.SQL.Translator.ExpressionTranslator`2.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.String">
            <summary>
            Collection of extension method for string datatype
            </summary>
        </member>
        <member name="M:Utilities.String.ToLeadingUpper(System.String,System.Boolean,System.Char)">
            <summary>
            Convert input string to upper case just first character (for the whole input or for each word)
            </summary>
            <param name="input"></param>
            <param name="upperAllWords"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.ToBase64String(System.String)">
            <summary>
            Convert input string to base64 format string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.FromBase64String(System.String)">
            <summary>
            Convert base64 string to original string
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.Translate(System.String,System.String,System.String)">
            <summary>
            Translate original text from given language to target language, supported language can be found in Utilities.Enumerables.Language.
            </summary>
            <param name="originalText">Original text.</param>
            <param name="fromLanguage">From language.</param>
            <param name="toLanguage">To language.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Decimal,System.String)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Int32,System.String)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Double,System.String)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Single,System.String)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.String,System.String)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
    </members>
</doc>
