<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities.Lite</name>
    </assembly>
    <members>
        <member name="T:Utilities.Attributes.SQL.BindingFlagsAttribute">
            <summary>
            Attribute for specific how reflection should perform on usage class
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.FieldAttribute">
            <summary>
            Attribute for field name customization
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.IgnoreFieldAttribute">
            <summary>
            Attribute for ignorance on insert or update statement
            </summary>
        </member>
        <member name="T:Utilities.Attributes.SQL.PrimaryKeyAttribute">
            <summary>
            Attribute which specified which property is a primary key
            </summary>
        </member>
        <member name="F:Utilities.Attributes.SQL.PrimaryKeyAttribute.AutoIncrement">
            <summary>
            Whether this primary key is auto-increment or not.
            </summary>
        </member>
        <member name="M:Utilities.Attributes.SQL.PrimaryKeyAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="autoIncrement"></param>
        </member>
        <member name="T:Utilities.Attributes.SQL.TableAttribute">
            <summary>
            Attribute for table name customization
            </summary>
        </member>
        <member name="T:Utilities.Classes.CircularQueue`1">
            <summary>
            Fixed-size queue which automatically dequeue when elements are going to exceed the limit.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="limitSize"></param>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="limitSize"></param>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.Enqueue(`0)">
            <summary>
            Enqueue element into the last of sequence.
            </summary>
            <param name="element">data to enqueue</param>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.TryEnqueue(`0,`0@)">
            <summary>
            Enqueue element into the last of sequence.
            </summary>
            <param name="element">data to enqueue</param>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.Dequeue">
            <summary>
            Dequeue element from the start of the sequence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.Peek">
            <summary>
            return an object from the beginning of the queue
            without removing it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.ShiftLeft">
            <summary>
            Shift all elements by 1 index to the left.
            </summary>
        </member>
        <member name="M:Utilities.Classes.CircularQueue`1.ShiftRight">
            <summary>
            Shift all elements by 1 index to the right.
            </summary>
        </member>
        <member name="T:Utilities.Classes.DatabaseParameter">
            <summary>
            Provide an abstract layer for IDbParameter for using in a non-generic environment.
            </summary>
        </member>
        <member name="F:Utilities.Classes.DatabaseParameter.ParameterName">
            <summary>
            Name of parameter;
            </summary>
        </member>
        <member name="P:Utilities.Classes.DatabaseParameter.Value">
            <summary>
            Value of parameter;
            </summary>
        </member>
        <member name="F:Utilities.Classes.DatabaseParameter.Direction">
            <summary>
            Direction of parameter;
            </summary>
        </member>
        <member name="P:Utilities.Classes.DatabaseParameter.DbType">
            <summary>
            Get the <seealso cref="T:System.Data.DbType"/> of the parameter, this property is currently not allow to set.
            </summary>
        </member>
        <member name="M:Utilities.Classes.DatabaseParameter.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Name of parameter</param>
            <param name="value">Value of parameter</param>
        </member>
        <member name="M:Utilities.Classes.DatabaseParameter.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Constructor
            </summary>
            <param name="parameterName">Name of parameter</param>
            <param name="value">Value of parameter</param>
            <param name="direction">Direction of parameter</param>
        </member>
        <member name="T:Utilities.Classes.InternalPropertyInfo">
            <summary>
            Proxy for PropertyInfo for customizable property for internal use only.
            </summary>
        </member>
        <member name="T:Utilities.Classes.DynamicObjectAnalyzer">
            <summary>
            Collection of DynamicObjectMetadata which describe the looks and shape of dictionary dynamic object.
            </summary>
        </member>
        <member name="P:Utilities.Classes.DynamicObjectAnalyzer.Values">
            <summary>
            Available object for dynamic object.
            </summary>
        </member>
        <member name="P:Utilities.Classes.DynamicObjectAnalyzer.Keys">
            <summary>
            Available keys for dynamic object.
            </summary>
        </member>
        <member name="P:Utilities.Classes.DynamicObjectAnalyzer.Item(System.String)">
            <summary>
            Get value by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Utilities.Classes.DynamicObjectAnalyzer.Item(System.Int32)">
            <summary>
            Get value by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Classes.DynamicObjectAnalyzer.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Utilities.Classes.DynamicObjectAnalyzer.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Constructor
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Utilities.Classes.DynamicObjectAnalyzer.TryParse``1(``0@)">
            <summary>
            Try parse dynamic object into specified object type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Classes.DynamicObjectAnalyzer.Parse``1">
            <summary>
            Parse dynamic object into specified object type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Utilities.Classes.DynamicObjectMetadata">
            <summary>
            Contains information of member of dynamic object.
            </summary>
        </member>
        <member name="T:Utilities.Classes.PropertyGetterInfo`1">
            <summary>
            Custom class which reflect the characteristic of <seealso cref="T:System.Reflection.PropertyInfo"/> GetValue while maintain better memory footprint and execution speed.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="F:Utilities.Classes.PropertyGetterInfo`1.Name">
            <summary>
            Gets the name of current member.
            </summary>
        </member>
        <member name="F:Utilities.Classes.PropertyGetterInfo`1.FieldName">
            <summary>
            Gets the <seealso cref="T:Utilities.Attributes.SQL.FieldAttribute"/> value of current member.
            </summary>
        </member>
        <member name="F:Utilities.Classes.PropertyGetterInfo`1.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="M:Utilities.Classes.PropertyGetterInfo`1.GetValue(`0)">
            <summary>
            Returns the property value of a specified object.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Classes.PropertySetterInfo`1">
            <summary>
            Custom class which reflect the characteristic of <seealso cref="T:System.Reflection.PropertyInfo"/> SetValue while maintain better memory footprint and execution speed.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="F:Utilities.Classes.PropertySetterInfo`1.Name">
            <summary>
            Gets the name of current member.
            </summary>
        </member>
        <member name="F:Utilities.Classes.PropertySetterInfo`1.FieldName">
            <summary>
            Gets the <seealso cref="T:Utilities.Attributes.SQL.FieldAttribute"/> value of current member.
            </summary>
        </member>
        <member name="F:Utilities.Classes.PropertySetterInfo`1.PropertyType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="F:Utilities.Classes.PropertySetterInfo`1.PropertyIndex">
            <summary>
            Gets the index of this property.
            </summary>
        </member>
        <member name="M:Utilities.Classes.PropertySetterInfo`1.SetValue(`0,System.Object)">
            <summary>
            Sets the property value of a specified object.
            </summary>
            <param name="source"></param>
            <param name="value"></param>
        </member>
        <member name="T:Utilities.Enum.FormatSpecifier">
            <summary>
            Standard numeric format strings are used to format common numeric types (https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings#the-currency-c-format-specifier)
            </summary>
        </member>
        <member name="F:Utilities.Enum.FormatSpecifier.Value">
            <summary>
            Inner value for current format.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Currency">
            <summary>
            The "C" (or currency) format specifier converts a number to a string that represents a currency amount. 
            The precision specifier indicates the desired number of decimal places in the result string. 
            If the precision specifier is omitted, the default precision is defined by the NumberFormatInfo.CurrencyDecimalDigits property.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Decimal">
            <summary>
            The "D" (or decimal) format specifier converts a number to a string of decimal digits (0-9), prefixed by a minus sign if the number is negative. 
            This format is supported only for integral types.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Exponential">
            <summary>
            The exponential ("E") format specifier converts a number to a string of the form "-d.ddd…E+ddd" or "-d.ddd…e+ddd", where each "d" indicates a digit (0-9). 
            The string starts with a minus sign if the number is negative. 
            Exactly one digit always precedes the decimal point.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.FixedPoint">
            <summary>
            The fixed-point ("F") format specifier converts a number to a string of the form "-ddd.ddd…" where each "d" indicates a digit (0-9). 
            The string starts with a minus sign if the number is negative.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.General">
            <summary>
            The general ("G") format specifier converts a number to the more compact of either fixed-point or scientific notation, depending on the type of the number and whether a precision specifier is present. 
            The precision specifier defines the maximum number of significant digits that can appear in the result string. 
            If the precision specifier is omitted or zero, the type of the number determines the default precision, as indicated in the following table.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Numeric">
            <summary>
            The numeric ("N") format specifier converts a number to a string of the form "-d,ddd,ddd.ddd…", where "-" indicates a negative number symbol if required, "d" indicates a digit (0-9), "," indicates a group separator, and "." indicates a decimal point symbol. 
            The precision specifier indicates the desired number of digits after the decimal point. 
            If the precision specifier is omitted, the number of decimal places is defined by the current NumberFormatInfo.NumberDecimalDigits property.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Percent">
            <summary>
            The percent ("P") format specifier multiplies a number by 100 and converts it to a string that represents a percentage. 
            The precision specifier indicates the desired number of decimal places. 
            If the precision specifier is omitted, the default numeric precision supplied by the current PercentDecimalDigits property is used.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.RoundTrip">
            <summary>
            The round-trip ("R") format specifier attempts to ensure that a numeric value that is converted to a string is parsed back into the same numeric value. 
            This format is supported only for the Single, Double, and BigInteger types.
            </summary>
        </member>
        <member name="P:Utilities.Enum.FormatSpecifier.Hexadecimal">
            <summary>
            The hexadecimal ("X") format specifier converts a number to a string of hexadecimal digits. 
            The case of the format specifier indicates whether to use uppercase or lowercase characters for hexadecimal digits that are greater than 9. 
            For example, use "X" to produce "ABCDEF", and "x" to produce "abcdef". This format is supported only for integral types.
            </summary>
        </member>
        <member name="T:Utilities.Enum.Language">
            <summary>
            Contains supported language constants for language translator.
            </summary>
        </member>
        <member name="F:Utilities.Enum.Language.Bork_bork_bork">
            <summary>
            What kind of language is this? doesn't seem to work tho.
            </summary>
        </member>
        <member name="T:Utilities.Enum.InternalPredefinedConfiguration">
            <summary>
            Contains supported language constants for language translator.
            </summary>
        </member>
        <member name="T:Utilities.Enum.SchemaRestriction">
            <summary>
            Provide schema restrictions type for SQL Server (https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/schema-restrictions)
            </summary>
        </member>
        <member name="T:Utilities.File">
            <summary>
            Contains File I/O operation over Json,Csv,Xml file type.
            </summary>
        </member>
        <member name="M:Utilities.File.ReadJsonAs``1(System.String,System.IO.FileMode)">
            <summary>
            Read json file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target json file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadXmlAs``1(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
            Read XML file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target XML file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadJsonAsAsync``1(System.String,System.IO.FileMode)">
            <summary>
            Read json file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target json file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadXmlAsAsync``1(System.String,System.IO.FileMode,System.Boolean)">
            <summary>
            Read xml file and deserialize to object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">Path to target xml file.</param>
            <param name="fileMode">A constant that determines how to open or create the file.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.ReadCsvAs``1(System.String,System.Boolean)">
            <summary>
            Read csv file and transform input into given class (you still need to manually give custom implement via ICSVReader)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsJson(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.File.WriteAsCsv``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.Encoding,System.String)">
            <summary>
            Serialize given object and write to csv file.
            </summary>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.WriteAsCsv``1(``0,System.String,System.Text.Encoding,System.String)">
            <summary>
            Serialize given object and write to csv file.
            </summary>
            <param name="data">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.WriteAsJsonAsync(System.Collections.Generic.IEnumerable{System.Object},System.String,System.Text.Encoding)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="M:Utilities.File.WriteAsJsonAsync(System.Object,System.String,System.Text.Encoding)">
            <summary>
            Serialize given object and write to json file.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">Target object.</param>
            <param name="path">Path to target json file.</param>
            <param name="encoding">The encoding to apply to the string.</param>
            <param name="fileMode">File mode.</param>
        </member>
        <member name="T:Utilities.HttpRequest">
            <summary>
            Wrapper for standard Microsoft HttpClient request for GET,POST,PUT,PATCH and DELETE
            </summary>
        </member>
        <member name="M:Utilities.HttpRequest.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseUrl"></param>
        </member>
        <member name="M:Utilities.HttpRequest.AddDefaultHeaderValue(System.String,System.String)">
            <summary>
            Add default request header value.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Utilities.HttpRequest.ClearDefaultHeadersValue">
            <summary>
            Clear all request headers value.
            </summary>
        </member>
        <member name="M:Utilities.HttpRequest.Dispose">
            <summary>
            Dispose the object and release all unmanaged resources under the hood.
            </summary>
        </member>
        <member name="M:Utilities.HttpRequest.GetAsync(System.String)">
            <summary>
            Request GET to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.GetAsync``1(System.String)">
            <summary>
            Request GET to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostAsync(System.String,System.Object)">
            <summary>
            Request POST to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PostAsync``1(System.String,System.Object)">
            <summary>
            Request POST to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutAsync(System.String,System.Object)">
            <summary>
            Request PUT to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PutAsync``1(System.String,System.Object)">
            <summary>
            Request PUT to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PatchAsync(System.String,System.Object)">
            <summary>
            Request PATCH to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.PatchAsync``1(System.String,System.Object)">
            <summary>
            Request PATCH to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync(System.String)">
            <summary>
            Request DELETE to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DeleteAsync``1(System.String)">
            <summary>
            Request DELETE to specific action of current host url and return status code with body.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.HttpRequest.DefaultContentBuilder(System.Object)">
            <summary>
            Provide a way to build HttpContent from given body as a fallback when body is not HttpContent already.
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Interfaces.ICsvReader">
            <summary>
            Interface required for CSV Reader.
            </summary>
        </member>
        <member name="M:Utilities.Interfaces.ICsvReader.ReadFromCsv(System.String)">
            <summary>
            Content of csv data line in form of string.
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Utilities.Interfaces.IDatabaseConnector">
            <summary>
            Provide methods for wrapper operation on DbConnection class
            </summary>
        </member>
        <member name="P:Utilities.Interfaces.IDatabaseConnector.ConnectionString">
            <summary>
            Connection string of this object.
            </summary>
        </member>
        <member name="P:Utilities.Interfaces.IDatabaseConnector.IsOpen">
            <summary>
            Determine whether the connection is open or not.
            </summary>
        </member>
        <member name="P:Utilities.Interfaces.IDatabaseConnector.Connection">
            <summary>
            Connector underlying current connection.
            </summary>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReader``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReader(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReaderAsDataTable(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return DataTable
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteScalar(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute parameterized SQL that selects a single value.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="transaction"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteScalar``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteNonQuery(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReaderAsync``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReaderAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteReaderAsDataTableAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return DataTable in an asynchronous manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteScalarAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a string in asynchronous manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteScalarAsync``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Interfaces.IDatabaseConnector.ExecuteNonQueryAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.LibraryMetadata">
            <summary>
            Contains information of Utilities library version.
            </summary>
        </member>
        <member name="P:Utilities.LibraryMetadata.Version">
            <summary>
            Library version.
            </summary>
        </member>
        <member name="P:Utilities.LibraryMetadata.TargetFramework">
            <summary>
            Build target framework version.
            </summary>
        </member>
        <member name="T:Utilities.Numerics.MathExtension">
            decimal method derived from https://github.com/raminrahimzada/CSharp-Helper-Classes/blob/master/Math/DecimalMath
            <summary>
            Provides extension methods for specific circumstances on numerical on top of Math API
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.PI">
            <summary>
            Represents the ratio of the circumference of a circle to its diameter, specified
            by the constant, π.
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.EPSILON">
            <summary>
            Represent error tolerance rate.
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.PIx2">
            <summary>
            represents 2*PI.
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.E">
            <summary>
            Represents the natural logarithmic base, specified by the constant, e.
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.PIdiv2">
            <summary>
            represents PI/2
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.PIdiv4">
            <summary>
            represents PI/4
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.Einv">
            <summary>
            represents 1.0/E
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.Log10Inv">
            <summary>
            log(10,E) factor
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.Zero">
            <summary>
            Zero
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.One">
            <summary>
            One
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.Half">
            <summary>
            Represents 0.5M
            </summary>
        </member>
        <member name="F:Utilities.Numerics.MathExtension.MaxIteration">
            <summary>
            Max iterations count in Taylor series
            </summary>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Exp(System.Decimal)">
            <summary>
            Returns e raised to the specified power.
            </summary>
            <param name="x">A number specifying a power.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Pow(System.Decimal,System.Decimal)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="value">A double-precision floating-point number to be raised to a power.</param>
            <param name="pow">A double-precision floating-point number that specifies a power.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.PowerN(System.Decimal,System.Int32)">
            <summary>
            Power to the integer value
            </summary>
            <param name="value"></param>
            <param name="power"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Log10(System.Decimal)">
            <summary>
            Returns the base 10 logarithm of a specified number.
            </summary>
            <param name="x">A number whose logarithm is to be found.</param>
            <returns>
            One of the values in the following table. d parameter Return value Positive The
            base 10 log of d; that is, log 10d. Zero System.Double.NegativeInfinity Negative
            System.Double.NaN Equal to System.Double.NaNSystem.Double.NaN Equal to System.Double.PositiveInfinitySystem.Double.PositiveInfinity
            </returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Log(System.Decimal)">
            <summary>
            Analogy of Math.Log
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Cos(System.Decimal)">
            <summary>
            Returns the cosine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Tan(System.Decimal)">
            <summary>
            Returns the tangent of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Sin(System.Decimal)">
            <summary>
            Returns the sine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Sqrt(System.Decimal,System.Decimal)">
            <summary>
            Analogy of Math.Sqrt
            </summary>
            <param name="x"></param>
            <param name="epsilon">lasts iteration while error less than this epsilon</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Sinh(System.Decimal)">
            <summary>
            Returns the hyperbolic sine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Cosh(System.Decimal)">
            <summary>
            Returns the hyperbolic cosine of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Sign(System.Decimal)">
            <summary>
            Analogy of Math.Sign
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Tanh(System.Decimal)">
            <summary>
            Returns the hyperbolic tangent of the specified angle.
            </summary>
            <param name="x">An angle, measured in radians.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Abs(System.Decimal)">
            <summary>
            Analogy of Math.Abs
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Asin(System.Decimal)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="x">A number representing a sine, where x must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Atan(System.Decimal)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="x">A number representing a tangent.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Acos(System.Decimal)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="x">A number representing a cosine, where x must be greater than or equal to -1, but less than or equal to 1.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Atan2(System.Decimal,System.Decimal)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified numbers.
            for more see this
            <seealso cref="!:http://i.imgur.com/TRLjs8R.png"/>
            </summary>
            <param name="y">The y coordinate of a point.</param>
            <param name="x">The x coordinate of a point.</param>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Length(System.Int32)">
            <summary>
            Returns the digit length of a specified number.
            </summary>
            <param name="value">A number.</param>
            <returns>Length of a number.</returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Length(System.Double)">
            <summary>
            Returns the digit length of a specified number.
            </summary>
            <param name="value">A number.</param>
            <returns>Length of a number.</returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Length(System.Single)">
            <summary>
            Returns the digit length of a specified number.
            </summary>
            <param name="value">A number.</param>
            <returns>Length of a number.</returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Length(System.Decimal)">
            <summary>
            Returns the digit length of a specified number.
            </summary>
            <param name="value">A number.</param>
            <returns>Length of a number.</returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.Length(System.Int64)">
            <summary>
            Returns the digit length of a specified number.
            </summary>
            <param name="value">A number.</param>
            <returns>Length of a number.</returns>
        </member>
        <member name="M:Utilities.Numerics.MathExtension.IsPrimeNumber(System.Int32)">
            <summary>
            Returns the boolean whether the value is prime number or not.
            </summary>
            <param name="value">A number.</param>
            <returns>A boolean whether the value is prime number or not.</returns>
        </member>
        <member name="T:Utilities.RegularExpression">
            <summary>
            Basic regular expression wrapper
            </summary>
        </member>
        <member name="M:Utilities.RegularExpression.IsPhoneNumber(System.String,System.String)">
            <summary>
            Check if the given input is matching the phone number (Thailand phone number by default)
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsEmail(System.String,System.String)">
            <summary>
            Check if the given input is matching the email
            </summary>
            <param name="input">Input string</param>
            <param name="pattern">Regex pattern to check whether the input is matched or not</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String)">
            <summary>
            Check if the given input is matching the number-only
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String,System.Int32)">
            <summary>
            Check if the given input is matching the number-only within specified length.
            </summary>
            <param name="input"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyDigit(System.String,System.Int32,System.Int32)">
            <summary>
            Check if the given input is matching the number-only within the length boundary.
            </summary>
            <param name="input"></param>
            <param name="lengthFrom"></param>
            <param name="lengthTo"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyText(System.String)">
            <summary>
            Check if the given input is matching the string-only (English and Thai alphabetics combination)
            </summary>
            <param name="input">Input string</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsOnlyText(System.String,Utilities.Enum.Language)">
            <summary>
            Check if the given input is matching the string-only in specific language (Support English and Thai language only).
            </summary>
            <param name="input"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.RegularExpression.IsValidThaiCitizenId(System.String)">
            <summary>
            Check if the given input is matching the Thai citizen id format.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.Cryptography">
            <summary>
            Simple wrapper for cryptography methods
            </summary>
        </member>
        <member name="M:Utilities.Security.Cryptography.Encrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Encrypt given plain text into hash string with specific salt
            </summary>
            <param name="plainText">Plain text to encrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Encryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.Decrypt(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Decrypt given hash string into plain text with specific salt
            </summary>
            <param name="hash">Hash string to decrypt</param>
            <param name="salt">Salt using to calculate the hash</param>
            <param name="blockSize">Entropy size</param>
            <param name="iterations">Decryption iterations</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.GenerateSalt(System.Int32)">
            <summary>
            Randomly generate salt byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.Cryptography.SecureRandomString(System.Int32,System.String)">
            <summary>
            Provide statistically random string generate with customizable length and combination.
            </summary>
            <param name="length">Length of string.</param>
            <param name="combination">Combination of string.</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.CryptoProvider.AES">
            <summary>
            Simple wrapper for Advance Encryption Standard.
            </summary>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.AES.Encrypt(System.String,System.String)">
            <summary>
            Encrypt data by given key using Advance Encryption Standard.
            </summary>
            <param name="key">key to encrypt the data</param>
            <param name="data">raw data to encrypt</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.AES.Decrypt(System.String,System.String)">
            <summary>
            Decrypt data by given key using Advance Encryption Standard.
            </summary>
            <param name="key">key to decrypt the data</param>
            <param name="data">encrypted data to decrypt</param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Security.CryptoProvider.RSA">
            <summary>
            Simple wrapper for Rivest–Shamir–Adleman method
            </summary>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.RSA.KeyGenerator">
            <summary>
            Generate private key and public key as a pair.
            </summary>
            <returns>Tuple of private and public key</returns>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.RSA.CreatePrivateKey">
            <summary>
            Generate private key.
            </summary>
            <returns>private key as string</returns>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.RSA.CreatePublicKey(System.String)">
            <summary>
            Generate public key using private key.
            </summary>
            <param name="privateKey">Private key as string</param>
            <returns>public key as string</returns>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.RSA.Encrypt(System.String,System.String)">
            <summary>
            Encrypt raw data using public key
            </summary>
            <param name="publicKey">Public key as string</param>
            <param name="data">Raw data to encrypt</param>
            <returns>Encrypted data as byte array</returns>
        </member>
        <member name="M:Utilities.Security.CryptoProvider.RSA.Decrypt(System.String,System.Byte[])">
            <summary>
            Decrypt encrypted byte array using private key
            </summary>
            <param name="privateKey">Private key as string</param>
            <param name="encryptedBytes">Encrypted byte array</param>
            <returns>Raw data of encrypted byte array</returns>
        </member>
        <member name="T:Utilities.Security.OneWayHash">
            <summary>
            Simple wrapper for one-way hashing specifically for password hashing.
            </summary>
        </member>
        <member name="M:Utilities.Security.OneWayHash.Encrypt(System.String,System.Byte[],System.Security.Cryptography.DeriveBytes)">
            <summary>
            Encrypt text with specified salt, the encrypted text is irreversible but still can be verify using Verify(text,hash,salt) method.
            </summary>
            <param name="text"></param>
            <param name="salt"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Utilities.Security.OneWayHash.Encrypt(System.String,System.Byte[]@)">
            <summary>
            Encrypt text WITHOUT specified salt and let the internal worker generate salt instead, the encrypted text is irreversible but still can be verify using Verify(text,hash,salt) method.
            </summary>
            <param name="text"></param>
            <param name="salt"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Security.OneWayHash.Verify(System.String,System.String,System.Byte[])">
            <summary>
            Verify if given text is the same with the hash by encrypt it and compare it againts the hash.
            </summary>
            <param name="text"></param>
            <param name="hash"></param>
            <param name="salt"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="T:Utilities.Shared.ArrayExtension">
            <summary>
            Collection of Array extension methods
            </summary>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Int32[0:,0:])">
            <summary>
            Sum value of 2-dimensions <seealso cref="T:System.Int32"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Single[0:,0:])">
            <summary>
            Sum value of 2-dimensions <seealso cref="T:System.Single"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Double[0:,0:])">
            <summary>
            Sum value of 2-dimensions <seealso cref="T:System.Double"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Int32[0:,0:,0:])">
            <summary>
            Sum value of 3-dimensions <seealso cref="T:System.Int32"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Single[0:,0:,0:])">
            <summary>
            Sum value of 3-dimensions <seealso cref="T:System.Single"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.ArrayExtension.Sum(System.Double[0:,0:,0:])">
            <summary>
            Sum value of 3-dimensions <seealso cref="T:System.Double"/> array with locality of reference optimized.
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Shared.DataExtension">
            <summary>
            This class contains a generic way to build data from specific source such as DbDataReader or from object itself
            </summary>
        </member>
        <member name="M:Utilities.Shared.DataExtension.RowBuilder(System.Data.IDataReader)">
            <summary>
            Convert IDataReader into dynamic object.
            </summary>
            <param name="row">data reader to convert to dynamic object</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataReaderExtension.GetColumns(System.Data.IDataReader)">
            <summary>
            Get underlying column name of the IDataReader.
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Shared.DataTableExtension">
            <summary>
            Provide extensions for DataTable.
            </summary>
        </member>
        <member name="M:Utilities.Shared.DataTableExtension.ToEnumerable``1(System.Data.DataTable)">
            <summary>
            Convert DataTable into IEnumerable of specific type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataTableExtension.ToEnumerable(System.Data.DataTable)">
            <summary>
            Convert DataTable into IEnumerable of dynamic.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.DataTableExtension.GetColumns(System.Data.DataTable)">
            <summary>
            Get columns of DataTable.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.Shared.EnumerableExtension">
            <summary>
            Collection of Enumerable extension methods
            </summary>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Combine 2 or more enumerable of the same type into new enumerable
            </summary>
            <typeparam name="T">type of enumerable</typeparam>
            <param name="enumerables">enumerables to combine</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenates two to N sequences.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The first sequence to concatenate.</param>
            <param name="elements">The sequence to concatenate to the first sequence.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.SubEnumerable``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Create new enumerable from given enumerable, start index and count
            </summary>
            <typeparam name="T">type of enumerable</typeparam>
            <param name="source">base enumerable</param>
            <param name="startIndex">starting index</param>
            <param name="count">count of elements</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.Exception"/>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Partition``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Splits the collection into two collections, which is paired as Match and Unmatch.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">A base dataset.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Make an iterator that aggregates elements from each of the iterables.
            Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument
            sequences or iterables.The iterator stops when the shortest input iterable is exhausted.With a single
            iterable argument, it returns an iterator of 1-tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Make an iterator that aggregates elements from each of the iterables.
            Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument
            sequences or iterables.The iterator stops when the shortest input iterable is exhausted.With a single
            iterable argument, it returns an iterator of 1-tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="source3"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Make an iterator that aggregates elements from each of the iterables.
            Returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument
            sequences or iterables.The iterator stops when the shortest input iterable is exhausted.With a single
            iterable argument, it returns an iterator of 1-tuples.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="source1"></param>
            <param name="source2"></param>
            <param name="source3"></param>
            <param name="source4"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.ToStack``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnuemrable into Stack.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnumerable into Queue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>        
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert IEnumerable to DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Shuffle dataset inside source enumerable with each equally chance using Fisher-Yates-Durstenfeld shuffle.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Indicates whether the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> is null or not contain any element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.EnumerableExtension.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            Implementation of Dapper's AsList (https://github.com/StackExchange/Dapper/blob/master/Dapper/SqlMapper.cs) Licensed as http://www.apache.org/licenses/LICENSE-2.0
            <summary>
            Obtains the data as a list; if it is *already* a list, the original object is returned without
            any duplication; otherwise, ToList() is invoked.
            </summary>
            <typeparam name="T">The type of element in the list.</typeparam>
            <param name="source">The enumerable to return as a list.</param>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.IsGenericList(System.Object)">
            <summary>
            Verify if the object is a generic list.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.Cast(System.Object,System.Type)">
            <summary>
            Internally convert object to target type.
            </summary>
            <param name="obj"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.CompileGetter``1">
            <summary>
            Compiled version of PropertyInfo.GetValue().
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.CompileGetter``1(System.Reflection.PropertyInfo[])">
            <summary>
            Compiled version of PropertyInfo.GetValue().
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.CompileGetter``1(System.Reflection.PropertyInfo)">
            <summary>
            Compiled version of PropertyInfo.GetValue().
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.CompileSetter``1">
            <summary>
            Compiled version of PropertyInfo.SetValue().
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.Shared.GenericExtension.CompileSetter``1(System.Reflection.PropertyInfo[])">
            <summary>
            Compiled version of PropertyInfo.SetValue().
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.Abstracts.DatabaseConnectorBase">
            <summary>
            Abstract class that is contains the higher-abstract level of IDatabaseConnector.
            </summary>
        </member>
        <member name="T:Utilities.SQL.DatabaseConnector">
            <summary>
            Default implementation class of DatabaseConnectorProvider, provide an necessary implement for IDatabaseConnector.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.ConnectionString">
            <summary>
            Connection string of this object.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.IsOpen">
            <summary>
            Determine whether the connection is open or not.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.Connection">
            <summary>
            Instance of object that hold information of the connection.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.#ctor(System.Type,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="connectorType">Type of database connector, must be derived type of DbConnection</param>
            <param name="connectionString">Connection string to database</param>
            <exception cref="T:System.ArgumentNullException">Will throw argument null if connector type is null</exception>
            <exception cref="T:System.InvalidCastException">Will throw invalid cast if connector type is not a subclass of DbConnection</exception>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="connection">Instance of database connection</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReader``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReader(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteScalar``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteNonQuery(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsync``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType,System.Boolean)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="transaction"></param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="buffered">Whether to buffered result in memory.</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteScalarAsync``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a scalar object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteNonQueryAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute any non-DML SQL Query
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteScalar(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a string
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteScalarAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return a string in asynchronous manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsDataTable(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return DataTable
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsDataTableAsync(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return DataTable in an asynchronous manner
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.CompatibleFunctionName(Utilities.Enum.SqlFunction)">
            <summary>
            Provide function to convert from internal support SQL function to compatible SQL function (default support SQL Server).
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.CompatibleSQLType(System.Type)">
            <summary>
            Provide function to convert from CLR type to compatible SQL type (default support SQL Server).
            </summary>
            <param name="type">CLR type</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsyncEnumerable``1(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of specified POCO that is matching with the query columns, supported by async enumerable runtime.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="commandType">Type of SQL Command.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>IEnumerable of POCO</returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ExecuteReaderAsyncEnumerable(System.String,System.Collections.Generic.IEnumerable{Utilities.Classes.DatabaseParameter},System.Data.Common.DbTransaction,System.Data.CommandType)">
            <summary>
            Execute SELECT SQL query and return IEnumerable of dynamic object, supported by async enumerable runtime.
            </summary>
            <param name="sql">Any SELECT SQL that you want to perform with/without parameterized parameters (Do not directly put sql parameter in this parameter).</param>
            <param name="parameters">SQL parameters according to the sql parameter.</param>
            <param name="transaction"></param>
            <param name="commandType">Type of SQL Command.</param>
            <returns>IEnumerable of dynamic object</returns>
        </member>
        <member name="E:Utilities.SQL.DatabaseConnector.OnQueryExecuting">
            <summary>
            The event that will trigger when query is ready to execute.
            </summary>
        </member>
        <member name="E:Utilities.SQL.DatabaseConnector.OnqueryExecuted">
            <summary>
            The event that will trigger when query is executed.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database
            name specified in the connection string before the connection is opened.
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.DataSource">
            <summary>
            The name of the database server to which to connect. The default value is an
            empty string. 
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is
            connected. 
            </summary>
        </member>
        <member name="P:Utilities.SQL.DatabaseConnector.State">
            <summary>
            Gets a string that describes the state of the connection.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.BeginDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.ChangeDatabase(System.String)">
            <summary>
            Changes the current database for an open connection.
            </summary>
            <param name="databaseName"></param>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing
            any open connection.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.CreateDbCommand">
            <summary>
            Creates and returns a System.Data.Common.DbCommand object associated with the
            current connection.
            </summary>
        </member>
        <member name="M:Utilities.SQL.DatabaseConnector.Open">
            <summary>
            Opens a database connection with the settings specified by the System.Data.Common.DbConnection.ConnectionString.
            </summary>
        </member>
        <member name="T:Utilities.SQL.Events.ExecutionInterceptor">
            <summary>
            Contains event for command execution interceptor.
            </summary>
        </member>
        <member name="T:Utilities.SQL.Events.ExecutionInterceptor.OnQueryExecutingEventHandler">
            <summary>
            The event that will trigger when query is ready to execute.
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Utilities.SQL.Events.ExecutionInterceptor.OnQueryExecutedEventHandler">
            <summary>
            The event that will trigger when query is executed.
            </summary>
            <param name="affectedRows"></param>
        </member>
        <member name="T:Utilities.SQL.Extension.DataConnectorExtension">
            <summary>
            Provide extension set on CRUD operation for IDatabaseConnector
            </summary>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Query``1(Utilities.Interfaces.IDatabaseConnector,System.Nullable{System.Int32},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select all rows from table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Query``1(Utilities.Interfaces.IDatabaseConnector,System.Object,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select one row from table from given primary key (primary key can be set by [PrimaryKey] attribute, table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="primaryKey">Primary key of specific row</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryFirst``1(Utilities.Interfaces.IDatabaseConnector,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select first row from table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryFirst``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select first row from table by using matched predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Insert``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Insert row into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">Object to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.InsertMany``1(Utilities.Interfaces.IDatabaseConnector,System.Collections.Generic.IEnumerable{``0},System.Data.Common.DbTransaction)">
            <summary>
            Insert rows into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">IEnumrable to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Update``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Update specific object into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">Object to update.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an update.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Delete``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Delete given object from table by inference of [PrimaryKey] attribute. (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj"></param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Nullable{System.Int32},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select all rows from table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>IEnumerable of object</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Object,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select one row from table from given primary key (primary key can be set by [PrimaryKey] attribute, table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="primaryKey">Primary key of specific row</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryFirstAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select first row from table.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryFirstAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select first row from table by using matched predicate.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns>Object of given class</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.InsertAsync``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Insert row into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">Object to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.InsertManyAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Collections.Generic.IEnumerable{``0},System.Data.Common.DbTransaction)">
            <summary>
            Insert rows into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">Object to insert.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an insert.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.UpdateAsync``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Update specific object into table (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj">Object to update.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns>Affected row after an update.</returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.DeleteAsync``1(Utilities.Interfaces.IDatabaseConnector,``0,System.Data.Common.DbTransaction)">
            <summary>
            Delete given object from table by inference of [PrimaryKey] attribute. (table name is a class name or specific [Table] attribute, an attribute has higher priority).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="obj"></param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Query``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Delete``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction)">
            <summary>
            Delete data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32},System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="top">Specified TOP(n) rows.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.DeleteAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using matched predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="predicate">Predicate of data in LINQ manner</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Delete``1(Utilities.Interfaces.IDatabaseConnector,System.Object,System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using primary key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="primaryKey">Specified primary key.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.DeleteAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Object,System.Data.Common.DbTransaction)">
            <summary>
            Select data from table by using primary key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="primaryKey">Specified primary key.</param>
            <param name="transaction">Transaction for current execution.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Count``1(Utilities.Interfaces.IDatabaseConnector)">
            <summary>
            Returns rows count from specified table.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.CountAsync``1(Utilities.Interfaces.IDatabaseConnector)">
            <summary>
            Returns rows count from specified table in an asynchronous manner.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.Count``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns rows count on specific condition from specified table.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.CountAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns rows count on specific condition from specified table in an asynchronous manner.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryOffset``1(Utilities.Interfaces.IDatabaseConnector,System.Int32,System.Int32,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select rows from table by skipping rows by specified offset and take limit rows (SQL Server syntax).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="offset">The amount of rows to be offset (skip).</param>
            <param name="limit">The amount of rows to be take.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryOffset``1(Utilities.Interfaces.IDatabaseConnector,System.String,System.Int32,System.Int32,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select rows from table by skipping rows by specified offset and take limit rows (SQL Server syntax).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="orderBy">Order by column.</param>
            <param name="offset">The amount of rows to be offset (skip).</param>
            <param name="limit">The amount of rows to be take.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryOffsetAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Int32,System.Int32,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select rows from table by skipping rows by specified offset and take limit rows (SQL Server syntax).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="offset">The amount of rows to be offset (skip).</param>
            <param name="limit">The amount of rows to be take.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.QueryOffsetAsync``1(Utilities.Interfaces.IDatabaseConnector,System.String,System.Int32,System.Int32,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Select rows from table by skipping rows by specified offset and take limit rows (SQL Server syntax).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="orderBy">Order by column.</param>
            <param name="offset">The amount of rows to be offset (skip).</param>
            <param name="limit">The amount of rows to be take.</param>
            <param name="transaction">Transaction for current execution.</param>
            <param name="buffered">Whether the data should be cached in memory.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.CreateTable``1(Utilities.Interfaces.IDatabaseConnector,System.Data.Common.DbTransaction)">
            <summary>
            Create table from model object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.DataConnectorExtension.CreateTableAsync``1(Utilities.Interfaces.IDatabaseConnector,System.Data.Common.DbTransaction)">
            <summary>
            Create table from model object in an asynchronous manner.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="transaction"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.Extension.SqlConnectionExtension">
            <summary>
            Provide extension for DbConnection.
            </summary>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlConnectionExtension.GetSchema(System.Data.Common.DbConnection,Utilities.Enum.SchemaRestriction,System.String[])">
            <summary>
            Provide a safe-access to available schema restrictions on SQL Server.
            </summary>
            <param name="connection"></param>
            <param name="restriction"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlConnectionExtension.GetTableSchema(System.Data.IDbConnection,System.String)">
            <summary>
            Get table schema from current database connection.
            </summary>
            <param name="connection"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlConnectionExtension.GetStoredProcedures(System.Data.Common.DbConnection)">
            <summary>
            Get user-defined stored procedure from current database connection.
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.Extension.SqlQueryExtension">
            <summary>
            Provide extension for SQL generate.
            </summary>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.SelectQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Nullable{System.Int32})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.SelectQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Nullable{System.Int32})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <param name="top"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.SelectQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Object)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.InsertQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.InsertQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.UpdateQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.DeleteQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,``0)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.DeleteQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Object)">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="primaryKey"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.DeleteQueryGenerate``1(Utilities.SQL.Abstracts.DatabaseConnectorBase,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Generate SQL query with sql parameters.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.SQL.Extension.SqlQueryExtension.GenerateCreateTableStatement``1(Utilities.SQL.Abstracts.DatabaseConnectorBase)">
            <summary>
            Generate SQL create table query.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="T:Utilities.SQL.Translator.Converter`1">
            <summary>
            alternative to reflection builder with MUCH better on performance, implementation taken from https://stackoverflow.com/questions/19841120/generic-dbdatareader-to-listt-mapping/19845980#19845980
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Utilities.SQL.Translator.Evaluator.PartialEval(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="fnCanBeEvaluated">A function that decides whether a given expression node can be part of the local function.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Utilities.SQL.Translator.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:Utilities.SQL.Translator.Evaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="T:Utilities.SQL.Translator.Evaluator.Nominator">
            <summary>
            Performs bottom-up analysis to determine which nodes can possibly
            be part of an evaluated sub-tree.
            </summary>
        </member>
        <member name="T:Utilities.SQL.Translator.ExpressionTranslator`1">
            <summary>
            Provide expression tree translation service using visitor pattern.
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Utilities.SQL.Translator.ExpressionTranslator`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
             <summary>
            
             </summary>
             <param name="b"></param>
             <returns></returns>
        </member>
        <member name="T:Utilities.String">
            <summary>
            Collection of extension method for string datatype
            </summary>
        </member>
        <member name="M:Utilities.String.ToLeadingUpper(System.ReadOnlySpan{System.Char},System.Boolean,System.Char)">
            <summary>
            Convert input string to upper case just first character (for the whole input or for each word)
            </summary>
            <param name="input"></param>
            <param name="upperAllWords"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.ToLeadingUpper(System.String,System.Boolean,System.Char)">
            <summary>
            Convert input string to upper case just first character (for the whole input or for each word)
            </summary>
            <param name="input"></param>
            <param name="upperAllWords"></param>
            <param name="seperator"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.Slice(System.String,System.Int32)">
            <summary>
            Slice given string, perform identical to SubString with very-low-to-no memory allocation.
            </summary>
            <param name="input">Input string to slice.</param>
            <param name="startIndex">Start index.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Slice given string, perform identical to SubString with very-low-to-no memory allocation.
            </summary>
            <param name="input">Input string to slice.</param>
            <param name="startIndex">Start index.</param>
            <param name="count">Count character.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.ToBase64String(System.String)">
            <summary>
            Convert input string to base64 format string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.FromBase64String(System.String)">
            <summary>
            Convert base64 string to original string
            </summary>
            <param name="base64String"></param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.Translate(System.String,Utilities.Enum.Language,Utilities.Enum.Language)">
            <summary>
            Translate original text from given language to target language, supported language can be found in Utilities.Enum.Language.
            </summary>
            <param name="originalText">Original text.</param>
            <param name="fromLanguage">From language.</param>
            <param name="toLanguage">To language.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.Translate(System.String,System.String,System.String)">
            <summary>
            Translate original text from given language to target language, supported language can be found in Utilities.Enum.Language.
            </summary>
            <param name="originalText">Original text.</param>
            <param name="fromLanguage">From language.</param>
            <param name="toLanguage">To language.</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Int32,Utilities.Enum.FormatSpecifier)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Double,Utilities.Enum.FormatSpecifier)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Single,Utilities.Enum.FormatSpecifier)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.Decimal,Utilities.Enum.FormatSpecifier)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
        <member name="M:Utilities.String.NumberFormat(System.String,Utilities.Enum.FormatSpecifier)">
            <summary>
            Convert given value into a number format.
            </summary>
            <param name="value">Value</param>
            <param name="numericFormat">https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings</param>
            <returns></returns>
        </member>
    </members>
</doc>
